package daily;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * @description
 * @date:2022/12/11 23:20
 * @author: qyl
 */
public class Solution6260 {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int len = queries.length;
        int[][] dir = new int[][]{{1, 0}, {0, 1}, {0, -1}, {-1, 0}};
        int n = grid.length;
        int m = grid[0].length;
        int[][] q = new int[len][2];

        for (int i = 0; i < len; i++) {
            q[i] = new int[]{queries[i], i};
        }
        Arrays.sort (q, Comparator.comparingInt (q2 -> q2[0]));

        System.out.println (Arrays.deepToString (q));

        int cnt = 0;
        int cur = 0;
        int[] res = new int[len];
        boolean[][] vis = new boolean[n][m];
        Queue<int[]> queue = new PriorityQueue<> (Comparator.comparingInt (o -> o[0]));
        queue.add (new int[]{grid[0][0], 0, 0});
        vis[0][0] = true;
        while (!queue.isEmpty ( )) {
            int[] point = queue.poll ( );
            int val = point[0], x = point[1], y = point[2];
            while (val >= q[cur][0]) {
                res[q[cur++][1]] = cnt;
                if (cur >= len) {
                    return res;
                }
            }
            cnt++;
            for (int i = 0; i < 4; i++) {
                int xx = x + dir[i][0], yy = y + dir[i][1];
                if (xx >= 0 && yy >= 0 && xx < n && yy < m && !vis[xx][yy]) {
                    queue.add (new int[]{grid[xx][yy], xx, yy});
                    vis[xx][yy] = true;
                }
            }
        }
        while (cur < len) {
            res[q[cur++][1]] = cnt;
        }
        return res;
    }

    @Test
    public void test() {
        int[][] a = new int[][]{{444424, 409221, 703419, 11307, 578382, 330430, 522887, 38831, 267101, 315541, 148425, 360873}, {353160, 3217, 718922, 509568, 494803, 327636, 715882, 456279, 374061, 701863, 711832, 644822}, {459535, 264294, 246310, 405317, 275802, 948618, 449015, 176733, 921040, 56692, 632708, 556696}, {167402, 594284, 8377, 766746, 728202, 329140, 399028, 907843, 68783, 149661, 244321, 861358}, {727577, 582470, 946680, 222674, 152875, 128658, 389710, 581164, 512061, 367464, 883657, 78004}, {463513, 473823, 328325, 888670, 267782, 435621, 153221, 877511, 900231, 72761, 825121, 532939}, {992835, 33883, 587426, 680675, 674055, 682929, 750368, 241142, 241026, 369751, 462134, 785672}, {915635, 918034, 398025, 400424, 695630, 594801, 748962, 278900, 705889, 570212, 42410, 823342}, {644602, 961002, 489119, 606936, 327139, 664880, 455045, 231423, 114466, 315707, 25092, 961268}, {962857, 647428, 139005, 221262, 469484, 669734, 66022, 473118, 258066, 67408, 545435, 316643}, {977028, 938186, 277400, 756609, 491213, 704014, 292941, 392893, 280499, 650462, 270100, 477276}, {393574, 562825, 637562, 639836, 8932, 540799, 758836, 403682, 79851, 17885, 851550, 499020}, {403665, 119906, 305796, 88211, 759076, 441097, 164887, 709599, 194, 468995, 922288, 359913}, {696749, 265394, 517399, 161062, 512967, 205098, 814158, 627951, 286474, 763625, 370987, 798077}, {166098, 940946, 871758, 690278, 903705, 368584, 576209, 94794, 25522, 255261, 209835, 540769}, {8088, 89612, 457088, 492467, 511285, 900536, 734726, 683046, 515695, 14749, 988608, 977041}, {76149, 112648, 515127, 257871, 912674, 880020, 32805, 688253, 722582, 931114, 734057, 939655}, {395351, 377494, 543729, 368629, 913310, 69242, 737795, 849175, 870860, 278493, 575561, 111787}};
        int[] q = {483649, 690923, 317026, 408761, 985459, 619592, 287085, 302896, 241756, 557463, 914140, 994632, 511904, 377570, 272415, 840485, 578955, 797418, 609746, 388421, 517504, 170621, 188489, 169881, 466574};
        System.out.println (Arrays.toString (maxPoints (a, q)));
    }
}
